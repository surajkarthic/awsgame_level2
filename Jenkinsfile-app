pipeline {
    agent any

    environment {
        AWS_REGION = "ap-south-1"
        ECR_REPO_NAME = "my-app-repo"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        // Add a new setup stage for Ansible collections
        stage('Setup Tools') {
            steps {
                sh 'ansible-galaxy collection install community.docker'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
<<<<<<< HEAD
=======
                    // Get the AWS Account ID and store it in a Groovy variable
>>>>>>> 24e2cf457295d5917681b7be77ab5a0fbaa8b069
                    def awsAccountId = sh(script: 'aws sts get-caller-identity --query Account --output text', returnStdout: true).trim()
                    def imageName = "${awsAccountId}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${BUILD_NUMBER}"
                    
                    sh "docker build -t '${imageName}' ."
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${awsAccountId}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                    sh "docker push '${imageName}'"

<<<<<<< HEAD
                    // Make the image name available to the next stage
                    env.IMAGE_TO_DEPLOY = imageName
=======
                    // Construct the full ECR image URI and store it in a Groovy variable
                    def imageName = "${awsAccountId}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${BUILD_NUMBER}"

                    // Use the Groovy variable directly in the shell commands
                    sh "echo 'Building the Docker image with tag: ${imageName}'"
                    sh "docker build -t '${imageName}' ."

                    sh "echo 'Logging into Amazon ECR...'"
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${awsAccountId}.dkr.ecr.${AWS_REGION}.amazonaws.com"

                    sh "echo 'Pushing image to ECR...'"
                    sh "docker push '${imageName}'"

                    sh "echo 'Image push complete!'"
>>>>>>> 24e2cf457295d5917681b7be77ab5a0fbaa8b069
                }
            }
        }

        // --- FINAL DEPLOYMENT STAGE ---
        stage('Deploy to EC2') {
            steps {
                sh '''
                    echo "Deploying image: ${IMAGE_TO_DEPLOY} to EC2..."
                    # We will need the SSH key to connect to our EC2 instance
                    # This assumes the key is stored as a Jenkins credential named 'aws-ec2-key'
                    
                    # For now, let's assume public key auth works or the instance is open
                    # A better way is to use Jenkins credentials for the key
                    
                    # Run the deployment playbook and pass the image name as a variable
                    ansible-playbook -i inventory/hosts playbooks/deploy-app.yml --extra-vars "image_to_deploy=${IMAGE_TO_DEPLOY}"
                '''
            }
        }
    }

    post {
        success {
<<<<<<< HEAD
            echo "Full CI/CD pipeline completed successfully!"
=======
            echo "CI pipeline completed successfully!"
>>>>>>> 24e2cf457295d5917681b7be77ab5a0fbaa8b069
        }
        failure {
            echo "CI/CD pipeline failed."
        }
    }
}
